// <auto-generated />
using System;
using BankApplication.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankApplication.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankApplication.Model.BankAccount", b =>
                {
                    b.Property<int>("BankAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAccountID"));

                    b.Property<int?>("AccountOwnerPersonID")
                        .HasColumnType("int");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.HasKey("BankAccountID");

                    b.HasIndex("AccountOwnerPersonID");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("BankApplication.Model.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BankApplication.Model.Transfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransferredFromBankAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("TransferredToBankAccountID")
                        .HasColumnType("int");

                    b.HasKey("TransferId");

                    b.HasIndex("TransferredFromBankAccountID");

                    b.HasIndex("TransferredToBankAccountID");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("BankApplication.Model.BankAccount", b =>
                {
                    b.HasOne("BankApplication.Model.Person", "AccountOwner")
                        .WithMany("BankAccounts")
                        .HasForeignKey("AccountOwnerPersonID");

                    b.Navigation("AccountOwner");
                });

            modelBuilder.Entity("BankApplication.Model.Transfer", b =>
                {
                    b.HasOne("BankApplication.Model.BankAccount", "TransferredFrom")
                        .WithMany("OutgoingTransactions")
                        .HasForeignKey("TransferredFromBankAccountID");

                    b.HasOne("BankApplication.Model.BankAccount", "TransferredTo")
                        .WithMany("IncomingTransactions")
                        .HasForeignKey("TransferredToBankAccountID");

                    b.Navigation("TransferredFrom");

                    b.Navigation("TransferredTo");
                });

            modelBuilder.Entity("BankApplication.Model.BankAccount", b =>
                {
                    b.Navigation("IncomingTransactions");

                    b.Navigation("OutgoingTransactions");
                });

            modelBuilder.Entity("BankApplication.Model.Person", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
